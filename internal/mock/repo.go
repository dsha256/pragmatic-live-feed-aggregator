// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pragmaticlivefeed/repo.go

// Package mock_pragmaticlivefeed is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pragmaticlivefeed "github.com/dsha256/pragmatic-live-feed-aggregator/internal/pragmaticlivefeed"
	dto "github.com/dsha256/pragmatic-live-feed-aggregator/pkg/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddTable mock base method.
func (m *MockRepository) AddTable(ctx context.Context, table dto.PragmaticTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTable", ctx, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTable indicates an expected call of AddTable.
func (mr *MockRepositoryMockRecorder) AddTable(ctx, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTable", reflect.TypeOf((*MockRepository)(nil).AddTable), ctx, table)
}

// GetTableByTableAndCurrencyIDs mock base method.
func (m *MockRepository) GetTableByTableAndCurrencyIDs(ctx context.Context, tableID, currencyID string) (dto.PragmaticTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableByTableAndCurrencyIDs", ctx, tableID, currencyID)
	ret0, _ := ret[0].(dto.PragmaticTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableByTableAndCurrencyIDs indicates an expected call of GetTableByTableAndCurrencyIDs.
func (mr *MockRepositoryMockRecorder) GetTableByTableAndCurrencyIDs(ctx, tableID, currencyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableByTableAndCurrencyIDs", reflect.TypeOf((*MockRepository)(nil).GetTableByTableAndCurrencyIDs), ctx, tableID, currencyID)
}

// ListTables mock base method.
func (m *MockRepository) ListTables(ctx context.Context) ([]dto.PragmaticTableWithID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", ctx)
	ret0, _ := ret[0].([]dto.PragmaticTableWithID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockRepositoryMockRecorder) ListTables(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockRepository)(nil).ListTables), ctx)
}

// MockAggregateRepository is a mock of AggregateRepository interface.
type MockAggregateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateRepositoryMockRecorder
}

// MockAggregateRepositoryMockRecorder is the mock recorder for MockAggregateRepository.
type MockAggregateRepositoryMockRecorder struct {
	mock *MockAggregateRepository
}

// NewMockAggregateRepository creates a new mock instance.
func NewMockAggregateRepository(ctrl *gomock.Controller) *MockAggregateRepository {
	mock := &MockAggregateRepository{ctrl: ctrl}
	mock.recorder = &MockAggregateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregateRepository) EXPECT() *MockAggregateRepositoryMockRecorder {
	return m.recorder
}

// AddTable mock base method.
func (m *MockAggregateRepository) AddTable(ctx context.Context, table dto.PragmaticTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTable", ctx, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTable indicates an expected call of AddTable.
func (mr *MockAggregateRepositoryMockRecorder) AddTable(ctx, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTable", reflect.TypeOf((*MockAggregateRepository)(nil).AddTable), ctx, table)
}

// GetTableByTableAndCurrencyIDs mock base method.
func (m *MockAggregateRepository) GetTableByTableAndCurrencyIDs(ctx context.Context, tableID, currencyID string) (dto.PragmaticTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableByTableAndCurrencyIDs", ctx, tableID, currencyID)
	ret0, _ := ret[0].(dto.PragmaticTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableByTableAndCurrencyIDs indicates an expected call of GetTableByTableAndCurrencyIDs.
func (mr *MockAggregateRepositoryMockRecorder) GetTableByTableAndCurrencyIDs(ctx, tableID, currencyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableByTableAndCurrencyIDs", reflect.TypeOf((*MockAggregateRepository)(nil).GetTableByTableAndCurrencyIDs), ctx, tableID, currencyID)
}

// ListTables mock base method.
func (m *MockAggregateRepository) ListTables(ctx context.Context) ([]dto.PragmaticTableWithID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", ctx)
	ret0, _ := ret[0].([]dto.PragmaticTableWithID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockAggregateRepositoryMockRecorder) ListTables(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockAggregateRepository)(nil).ListTables), ctx)
}

// MockAggregateRepositoryTx is a mock of AggregateRepositoryTx interface.
type MockAggregateRepositoryTx struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateRepositoryTxMockRecorder
}

// MockAggregateRepositoryTxMockRecorder is the mock recorder for MockAggregateRepositoryTx.
type MockAggregateRepositoryTxMockRecorder struct {
	mock *MockAggregateRepositoryTx
}

// NewMockAggregateRepositoryTx creates a new mock instance.
func NewMockAggregateRepositoryTx(ctrl *gomock.Controller) *MockAggregateRepositoryTx {
	mock := &MockAggregateRepositoryTx{ctrl: ctrl}
	mock.recorder = &MockAggregateRepositoryTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregateRepositoryTx) EXPECT() *MockAggregateRepositoryTxMockRecorder {
	return m.recorder
}

// AddTable mock base method.
func (m *MockAggregateRepositoryTx) AddTable(ctx context.Context, table dto.PragmaticTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTable", ctx, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTable indicates an expected call of AddTable.
func (mr *MockAggregateRepositoryTxMockRecorder) AddTable(ctx, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTable", reflect.TypeOf((*MockAggregateRepositoryTx)(nil).AddTable), ctx, table)
}

// GetTableByTableAndCurrencyIDs mock base method.
func (m *MockAggregateRepositoryTx) GetTableByTableAndCurrencyIDs(ctx context.Context, tableID, currencyID string) (dto.PragmaticTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableByTableAndCurrencyIDs", ctx, tableID, currencyID)
	ret0, _ := ret[0].(dto.PragmaticTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableByTableAndCurrencyIDs indicates an expected call of GetTableByTableAndCurrencyIDs.
func (mr *MockAggregateRepositoryTxMockRecorder) GetTableByTableAndCurrencyIDs(ctx, tableID, currencyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableByTableAndCurrencyIDs", reflect.TypeOf((*MockAggregateRepositoryTx)(nil).GetTableByTableAndCurrencyIDs), ctx, tableID, currencyID)
}

// InTx mock base method.
func (m *MockAggregateRepositoryTx) InTx(arg0 context.Context, arg1 pragmaticlivefeed.TxF) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InTx indicates an expected call of InTx.
func (mr *MockAggregateRepositoryTxMockRecorder) InTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InTx", reflect.TypeOf((*MockAggregateRepositoryTx)(nil).InTx), arg0, arg1)
}

// ListTables mock base method.
func (m *MockAggregateRepositoryTx) ListTables(ctx context.Context) ([]dto.PragmaticTableWithID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", ctx)
	ret0, _ := ret[0].([]dto.PragmaticTableWithID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockAggregateRepositoryTxMockRecorder) ListTables(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockAggregateRepositoryTx)(nil).ListTables), ctx)
}

// MockTransactional is a mock of Transactional interface.
type MockTransactional struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionalMockRecorder
}

// MockTransactionalMockRecorder is the mock recorder for MockTransactional.
type MockTransactionalMockRecorder struct {
	mock *MockTransactional
}

// NewMockTransactional creates a new mock instance.
func NewMockTransactional(ctrl *gomock.Controller) *MockTransactional {
	mock := &MockTransactional{ctrl: ctrl}
	mock.recorder = &MockTransactionalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactional) EXPECT() *MockTransactionalMockRecorder {
	return m.recorder
}

// InTx mock base method.
func (m *MockTransactional) InTx(arg0 context.Context, arg1 pragmaticlivefeed.TxF) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InTx indicates an expected call of InTx.
func (mr *MockTransactionalMockRecorder) InTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InTx", reflect.TypeOf((*MockTransactional)(nil).InTx), arg0, arg1)
}
